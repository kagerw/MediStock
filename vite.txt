// ===========================================
// package.json (フロントエンド)
// ===========================================
{
  "name": "medicine-inventory-frontend",
  "private": true,
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "lucide-react": "^0.263.1"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@vitejs/plugin-react": "^4.0.3",
    "autoprefixer": "^10.4.14",
    "postcss": "^8.4.24",
    "tailwindcss": "^3.3.0",
    "vite": "^4.4.5"
  }
}

// ===========================================
// vite.config.js
// ===========================================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:3001',
        changeOrigin: true,
      }
    }
  }
})

// ===========================================
// tailwind.config.js
// ===========================================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

// ===========================================
// postcss.config.js
// ===========================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

// ===========================================
// index.html
// ===========================================
<!doctype html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/pill.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>薬の在庫管理</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

// ===========================================
// src/main.jsx
// ===========================================
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)

// ===========================================
// src/index.css
// ===========================================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// ===========================================
// src/App.jsx
// ===========================================
import React, { useState, useEffect } from 'react';
import { Plus, Minus, Pill, AlertTriangle, History, RefreshCw } from 'lucide-react';

const API_BASE_URL = 'http://localhost:3001/api';

function App() {
  const [medicines, setMedicines] = useState([]);
  const [history, setHistory] = useState([]);
  const [showAddForm, setShowAddForm] = useState(false);
  const [showHistory, setShowHistory] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [newMedicine, setNewMedicine] = useState({
    name: '',
    quantity: '',
    dosage: '',
    frequency: '',
    notes: ''
  });

  // 薬一覧を取得
  const fetchMedicines = async () => {
    try {
      setLoading(true);
      const response = await fetch(`${API_BASE_URL}/medicines`);
      const result = await response.json();
      
      if (result.success) {
        setMedicines(result.data);
      } else {
        setError(result.error || 'データの取得に失敗しました');
      }
    } catch (err) {
      setError('サーバーとの通信に失敗しました');
      console.error('Fetch medicines error:', err);
    } finally {
      setLoading(false);
    }
  };

  // 履歴を取得
  const fetchHistory = async () => {
    try {
      const response = await fetch(`${API_BASE_URL}/history`);
      const result = await response.json();
      
      if (result.success) {
        setHistory(result.data);
      } else {
        setError(result.error || '履歴の取得に失敗しました');
      }
    } catch (err) {
      setError('履歴の取得に失敗しました');
      console.error('Fetch history error:', err);
    }
  };

  // 初回読み込み
  useEffect(() => {
    fetchMedicines();
    fetchHistory();
  }, []);

  // 薬を追加する関数
  const addMedicine = async () => {
    if (!newMedicine.name || !newMedicine.quantity) {
      setError('薬の名前と数量は必須です');
      return;
    }

    try {
      setLoading(true);
      const response = await fetch(`${API_BASE_URL}/medicines`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: newMedicine.name,
          quantity: parseInt(newMedicine.quantity),
          dosage: newMedicine.dosage,
          frequency: newMedicine.frequency,
          notes: newMedicine.notes
        })
      });

      const result = await response.json();

      if (result.success) {
        await fetchMedicines();
        await fetchHistory();
        
        setNewMedicine({
          name: '',
          quantity: '',
          dosage: '',
          frequency: '',
          notes: ''
        });
        setShowAddForm(false);
        setError('');
      } else {
        setError(result.error || '薬の追加に失敗しました');
      }
    } catch (err) {
      setError('薬の追加に失敗しました');
      console.error('Add medicine error:', err);
    } finally {
      setLoading(false);
    }
  };

  // 薬を服用する関数
  const takeMedicine = async (id, medicineName, currentQuantity) => {
    if (currentQuantity <= 0) {
      setError('在庫がありません');
      return;
    }

    try {
      setLoading(true);
      const response = await fetch(`${API_BASE_URL}/medicines/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ action: 'take' })
      });

      const result = await response.json();

      if (result.success) {
        await fetchMedicines();
        await fetchHistory();
        setError('');
      } else {
        setError(result.error || '服用の記録に失敗しました');
      }
    } catch (err) {
      setError('服用の記録に失敗しました');
      console.error('Take medicine error:', err);
    } finally {
      setLoading(false);
    }
  };

  // 薬を削除する関数
  const deleteMedicine = async (id) => {
    if (!confirm('この薬を削除してもよろしいですか？')) {
      return;
    }

    try {
      setLoading(true);
      const response = await fetch(`${API_BASE_URL}/medicines/${id}`, {
        method: 'DELETE'
      });

      const result = await response.json();

      if (result.success) {
        await fetchMedicines();
        setError('');
      } else {
        setError(result.error || '薬の削除に失敗しました');
      }
    } catch (err) {
      setError('薬の削除に失敗しました');
      console.error('Delete medicine error:', err);
    } finally {
      setLoading(false);
    }
  };

  // 在庫が少ない薬をチェック
  const lowStockMedicines = medicines.filter(med => med.quantity <= 3 && med.quantity > 0);
  const outOfStockMedicines = medicines.filter(med => med.quantity === 0);

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-4xl mx-auto">
        {/* ヘッダー */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Pill className="w-8 h-8 text-blue-600" />
              <h1 className="text-2xl font-bold text-gray-800">薬の在庫管理</h1>
              {loading && <RefreshCw className="w-5 h-5 text-blue-600 animate-spin" />}
            </div>
            <div className="flex gap-2">
              <button
                onClick={() => {
                  setShowHistory(!showHistory);
                  if (!showHistory) fetchHistory();
                }}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
                  showHistory 
                    ? 'bg-blue-600 text-white hover:bg-blue-700' 
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                <History className="w-4 h-4" />
                {showHistory ? '履歴を閉じる' : '履歴を表示'}
              </button>
              <button
                onClick={() => setShowAddForm(!showAddForm)}
                className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Plus className="w-4 h-4" />
                薬を追加
              </button>
              <button
                onClick={() => {
                  fetchMedicines();
                  fetchHistory();
                }}
                className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
              >
                <RefreshCw className="w-4 h-4" />
                更新
              </button>
            </div>
          </div>
        </div>

        {/* エラー表示 */}
        {error && (
          <div className="bg-red-50 border-l-4 border-red-400 p-4 mb-6 rounded-r-lg">
            <div className="flex items-center">
              <AlertTriangle className="w-5 h-5 text-red-600 mr-2" />
              <p className="text-red-800">{error}</p>
              <button
                onClick={() => setError('')}
                className="ml-auto text-red-600 hover:text-red-800"
              >
                ×
              </button>
            </div>
          </div>
        )}

        {/* アラート */}
        {(lowStockMedicines.length > 0 || outOfStockMedicines.length > 0) && (
          <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-6 rounded-r-lg">
            <div className="flex items-center">
              <AlertTriangle className="w-5 h-5 text-yellow-600 mr-2" />
              <h3 className="text-yellow-800 font-medium">在庫アラート</h3>
            </div>
            <div className="mt-2 text-sm text-yellow-700">
              {outOfStockMedicines.length > 0 && (
                <p>在庫切れ: {outOfStockMedicines.map(med => med.name).join(', ')}</p>
              )}
              {lowStockMedicines.length > 0 && (
                <p>在庫僅少（3個以下）: {lowStockMedicines.map(med => `${med.name}(${med.quantity}個)`).join(', ')}</p>
              )}
            </div>
          </div>
        )}

        {/* 薬追加フォーム */}
        {showAddForm && (
          <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
            <h2 className="text-lg font-semibold text-gray-800 mb-4">新しい薬を追加</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">薬の名前 *</label>
                <input
                  type="text"
                  value={newMedicine.name}
                  onChange={(e) => setNewMedicine({...newMedicine, name: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="例：ロキソニン錠"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">数量 *</label>
                <input
                  type="number"
                  value={newMedicine.quantity}
                  onChange={(e) => setNewMedicine({...newMedicine, quantity: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="例：30"
                  min="1"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">用量</label>
                <input
                  type="text"
                  value={newMedicine.dosage}
                  onChange={(e) => setNewMedicine({...newMedicine, dosage: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="例：1錠"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">服用頻度</label>
                <input
                  type="text"
                  value={newMedicine.frequency}
                  onChange={(e) => setNewMedicine({...newMedicine, frequency: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="例：1日3回食後"
                />
              </div>
            </div>
            <div className="mt-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">メモ</label>
              <textarea
                value={newMedicine.notes}
                onChange={(e) => setNewMedicine({...newMedicine, notes: e.target.value})}
                className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                rows="2"
                placeholder="例：副作用の注意点など"
              />
            </div>
            <div className="flex gap-2 mt-4">
              <button
                onClick={addMedicine}
                disabled={loading}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
              >
                {loading ? '追加中...' : '追加'}
              </button>
              <button
                onClick={() => setShowAddForm(false)}
                className="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors"
              >
                キャンセル
              </button>
            </div>
          </div>
        )}

        {/* 薬一覧 */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <h2 className="text-lg font-semibold text-gray-800 mb-4">現在の薬一覧</h2>
          {medicines.length === 0 && !loading ? (
            <p className="text-gray-500 text-center py-8">薬が登録されていません</p>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {medicines.map((medicine) => (
                <div
                  key={medicine.id}
                  className={`border rounded-lg p-4 ${
                    medicine.quantity === 0 
                      ? 'border-red-300 bg-red-50' 
                      : medicine.quantity <= 3 
                        ? 'border-yellow-300 bg-yellow-50' 
                        : 'border-gray-200 bg-white'
                  }`}
                >
                  <div className="flex justify-between items-start mb-2">
                    <h3 className="font-medium text-gray-800">{medicine.name}</h3>
                    <button
                      onClick={() => deleteMedicine(medicine.id)}
                      className="text-red-500 hover:text-red-700 text-sm"
                    >
                      削除
                    </button>
                  </div>
                  <div className="text-2xl font-bold text-blue-600 mb-2">
                    {medicine.quantity}個
                  </div>
                  {medicine.dosage && (
                    <p className="text-sm text-gray-600 mb-1">用量: {medicine.dosage}</p>
                  )}
                  {medicine.frequency && (
                    <p className="text-sm text-gray-600 mb-1">頻度: {medicine.frequency}</p>
                  )}
                  {medicine.notes && (
                    <p className="text-sm text-gray-600 mb-2">メモ: {medicine.notes}</p>
                  )}
                  <p className="text-xs text-gray-500 mb-3">追加日: {medicine.added_date}</p>
                  <button
                    onClick={() => takeMedicine(medicine.id, medicine.name, medicine.quantity)}
                    disabled={medicine.quantity === 0 || loading}
                    className={`w-full flex items-center justify-center gap-2 px-3 py-2 rounded-lg transition-colors ${
                      medicine.quantity === 0 || loading
                        ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                        : 'bg-green-600 text-white hover:bg-green-700'
                    }`}
                  >
                    <Minus className="w-4 h-4" />
                    服用する
                  </button>
                </div>
              ))}
            </div>
          )}
        </div>

        {/* 履歴 */}
        {showHistory && (
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h2 className="text-lg font-semibold text-gray-800 mb-4">服用・処方履歴</h2>
            {history.length === 0 ? (
              <p className="text-gray-500 text-center py-8">履歴がありません</p>
            ) : (
              <div className="space-y-3">
                {history.slice(0, 20).map((entry) => (
                  <div key={entry.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                    <div className="flex items-center gap-3">
                      <div className={`w-2 h-2 rounded-full ${
                        entry.action === '服用' ? 'bg-green-500' : 'bg-blue-500'
                      }`} />
                      <div>
                        <span className="font-medium">{entry.medicine_name}</span>
                        <span className={`ml-2 text-sm px-2 py-1 rounded ${
                          entry.action === '服用' 
                            ? 'bg-green-100 text-green-800' 
                            : 'bg-blue-100 text-blue-800'
                        }`}>
                          {entry.action}
                        </span>
                        {entry.notes && (
                          <span className="ml-2 text-sm text-gray-600">({entry.notes})</span>
                        )}
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-sm text-gray-600">
                        {entry.action === '服用' ? '-' : '+'}{entry.quantity}個
                      </div>
                      <div className="text-xs text-gray-500">{entry.date}</div>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}

export default App;

// ===========================================
// セットアップ手順
// ===========================================

// 1. 新しいViteプロジェクトを作成
// npm create vite@latest medicine-inventory-frontend -- --template react
// cd medicine-inventory-frontend

// 2. 上記のファイルで置き換える

// 3. 依存関係をインストール
// npm install

// 4. Tailwind CSSをセットアップ
// npm install -D tailwindcss postcss autoprefixer
// npx tailwindcss init -p

// 5. Lucide Reactをインストール
// npm install lucide-react

// 6. 開発サーバーを起動
// npm run dev