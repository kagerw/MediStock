import React, { useState } from 'react';
import { Plus, Minus, Pill, AlertTriangle, History, RefreshCw, Calendar, Clock } from 'lucide-react';

const MedicineAppMockup = () => {
  const [showAddForm, setShowAddForm] = useState(false);
  const [showHistory, setShowHistory] = useState(false);
  const [newMedicine, setNewMedicine] = useState({
    name: '',
    quantity: '',
    dosage: '',
    frequency: '',
    notes: ''
  });

  // 模擬データ
  const mockMedicines = [
    {
      id: 1,
      name: "アムロジピン錠5mg",
      quantity: 25,
      dosage: "1錠",
      frequency: "1日1回朝食後",
      notes: "高血圧治療薬",
      added_date: "2025/05/15"
    },
    {
      id: 2,
      name: "ロキソニン錠60mg",
      quantity: 2,
      dosage: "1錠",
      frequency: "痛みがある時のみ",
      notes: "胃に負担があるので食後に服用",
      added_date: "2025/05/28"
    },
    {
      id: 3,
      name: "ビオフェルミン配合散",
      quantity: 0,
      dosage: "1包",
      frequency: "1日3回食後",
      notes: "整腸剤",
      added_date: "2025/05/10"
    },
    {
      id: 4,
      name: "カロナール錠200mg",
      quantity: 18,
      dosage: "1-2錠",
      frequency: "発熱時のみ",
      notes: "",
      added_date: "2025/05/20"
    }
  ];

  const mockHistory = [
    {
      id: 1,
      action: "服用",
      medicine_name: "アムロジピン錠5mg",
      quantity: 1,
      date: "2025/06/03 08:30:15",
      notes: ""
    },
    {
      id: 2,
      action: "服用",
      medicine_name: "ロキソニン錠60mg", 
      quantity: 1,
      date: "2025/06/02 14:20:30",
      notes: ""
    },
    {
      id: 3,
      action: "追加処方",
      medicine_name: "アムロジピン錠5mg",
      quantity: 30,
      date: "2025/06/01 15:45:00",
      notes: "追加処方 - 1ヶ月分追加"
    },
    {
      id: 4,
      action: "処方追加",
      medicine_name: "カロナール錠200mg",
      quantity: 20,
      date: "2025/05/30 11:20:15",
      notes: "1-2錠, 発熱時のみ"
    },
    {
      id: 5,
      action: "服用",
      medicine_name: "ビオフェルミン配合散",
      quantity: 1,
      date: "2025/05/29 19:30:00",
      notes: ""
    }
  ];

  // 在庫アラート計算
  const lowStockMedicines = mockMedicines.filter(med => med.quantity <= 3 && med.quantity > 0);
  const outOfStockMedicines = mockMedicines.filter(med => med.quantity === 0);

  // 既存薬チェック
  const existingMedicine = newMedicine.name ? 
    mockMedicines.find(med => med.name.toLowerCase().includes(newMedicine.name.toLowerCase())) : null;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-4">
      <div className="max-w-4xl mx-auto">
        {/* ヘッダー */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <Pill className="w-8 h-8 text-blue-600" />
              <h1 className="text-2xl font-bold text-gray-800">薬の在庫管理</h1>
              <div className="bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full">
                オンライン
              </div>
            </div>
            <div className="flex gap-2">
              <button
                onClick={() => setShowHistory(!showHistory)}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg transition-colors ${
                  showHistory 
                    ? 'bg-blue-600 text-white hover:bg-blue-700' 
                    : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                }`}
              >
                <History className="w-4 h-4" />
                {showHistory ? '履歴を閉じる' : '履歴を表示'}
              </button>
              <button
                onClick={() => setShowAddForm(!showAddForm)}
                className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Plus className="w-4 h-4" />
                薬を追加
              </button>
            </div>
          </div>
        </div>

        {/* 在庫アラート */}
        {(lowStockMedicines.length > 0 || outOfStockMedicines.length > 0) && (
          <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-6 rounded-r-lg">
            <div className="flex items-center">
              <AlertTriangle className="w-5 h-5 text-yellow-600 mr-2" />
              <h3 className="text-yellow-800 font-medium">在庫アラート</h3>
            </div>
            <div className="mt-2 text-sm text-yellow-700">
              {outOfStockMedicines.length > 0 && (
                <p className="mb-1">🔴 在庫切れ: {outOfStockMedicines.map(med => med.name).join(', ')}</p>
              )}
              {lowStockMedicines.length > 0 && (
                <p>🟡 在庫僅少（3個以下）: {lowStockMedicines.map(med => `${med.name}(${med.quantity}個)`).join(', ')}</p>
              )}
            </div>
          </div>
        )}

        {/* 薬追加フォーム */}
        {showAddForm && (
          <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
            <h2 className="text-lg font-semibold text-gray-800 mb-4">薬を追加</h2>
            
            {/* 既存薬チェック表示 */}
            {existingMedicine && (
              <div className="bg-blue-50 border-l-4 border-blue-400 p-4 mb-4 rounded-r-lg">
                <div className="flex items-center">
                  <AlertTriangle className="w-5 h-5 text-blue-600 mr-2" />
                  <p className="text-blue-800">
                    「{existingMedicine.name}」は既に登録済みです。在庫を追加します。
                  </p>
                </div>
              </div>
            )}

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">薬の名前 *</label>
                <input
                  type="text"
                  value={newMedicine.name}
                  onChange={(e) => setNewMedicine({...newMedicine, name: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="例：ロキソニン錠"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">数量 *</label>
                <input
                  type="number"
                  value={newMedicine.quantity}
                  onChange={(e) => setNewMedicine({...newMedicine, quantity: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="例：30"
                  min="1"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">用量</label>
                <input
                  type="text"
                  value={newMedicine.dosage}
                  onChange={(e) => setNewMedicine({...newMedicine, dosage: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="例：1錠"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">服用頻度</label>
                <input
                  type="text"
                  value={newMedicine.frequency}
                  onChange={(e) => setNewMedicine({...newMedicine, frequency: e.target.value})}
                  className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  placeholder="例：1日3回食後"
                />
              </div>
            </div>
            <div className="mt-4">
              <label className="block text-sm font-medium text-gray-700 mb-1">メモ</label>
              <textarea
                value={newMedicine.notes}
                onChange={(e) => setNewMedicine({...newMedicine, notes: e.target.value})}
                className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                rows="2"
                placeholder="例：副作用の注意点など"
              />
            </div>
            <div className="flex gap-2 mt-4">
              <button
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
              >
                {existingMedicine ? '在庫を追加' : '薬を追加'}
              </button>
              <button
                onClick={() => setShowAddForm(false)}
                className="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors"
              >
                キャンセル
              </button>
            </div>
          </div>
        )}

        {/* 薬一覧 */}
        <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold text-gray-800">現在の薬一覧</h2>
            <div className="text-sm text-gray-500">
              合計 {mockMedicines.length} 種類
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {mockMedicines.map((medicine) => (
              <div
                key={medicine.id}
                className={`border rounded-lg p-4 transition-all hover:shadow-md ${
                  medicine.quantity === 0 
                    ? 'border-red-300 bg-red-50' 
                    : medicine.quantity <= 3 
                      ? 'border-yellow-300 bg-yellow-50' 
                      : 'border-gray-200 bg-white'
                }`}
              >
                <div className="flex justify-between items-start mb-2">
                  <h3 className="font-medium text-gray-800 text-sm leading-tight">{medicine.name}</h3>
                  <button className="text-red-500 hover:text-red-700 text-sm ml-2">
                    削除
                  </button>
                </div>
                
                <div className="flex items-center gap-2 mb-3">
                  <div className={`text-2xl font-bold ${
                    medicine.quantity === 0 ? 'text-red-600' :
                    medicine.quantity <= 3 ? 'text-yellow-600' : 'text-blue-600'
                  }`}>
                    {medicine.quantity}個
                  </div>
                  {medicine.quantity <= 3 && medicine.quantity > 0 && (
                    <span className="text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded">
                      僅少
                    </span>
                  )}
                  {medicine.quantity === 0 && (
                    <span className="text-xs bg-red-100 text-red-800 px-2 py-1 rounded">
                      在庫切れ
                    </span>
                  )}
                </div>

                {medicine.dosage && (
                  <p className="text-sm text-gray-600 mb-1">
                    💊 用量: {medicine.dosage}
                  </p>
                )}
                {medicine.frequency && (
                  <p className="text-sm text-gray-600 mb-1">
                    ⏰ 頻度: {medicine.frequency}
                  </p>
                )}
                {medicine.notes && (
                  <p className="text-sm text-gray-600 mb-2">
                    📝 {medicine.notes}
                  </p>
                )}
                
                <div className="flex items-center gap-1 text-xs text-gray-500 mb-3">
                  <Calendar className="w-3 h-3" />
                  追加日: {medicine.added_date}
                </div>
                
                <button
                  disabled={medicine.quantity === 0}
                  className={`w-full flex items-center justify-center gap-2 px-3 py-2 rounded-lg transition-colors ${
                    medicine.quantity === 0
                      ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                      : 'bg-green-600 text-white hover:bg-green-700 active:bg-green-800'
                  }`}
                >
                  <Minus className="w-4 h-4" />
                  服用する
                </button>
              </div>
            ))}
          </div>
        </div>

        {/* 履歴 */}
        {showHistory && (
          <div className="bg-white rounded-lg shadow-lg p-6">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold text-gray-800">服用・処方履歴</h2>
              <div className="text-sm text-gray-500">
                最新 {mockHistory.length} 件
              </div>
            </div>
            
            <div className="space-y-3">
              {mockHistory.map((entry) => (
                <div key={entry.id} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors">
                  <div className="flex items-center gap-3">
                    <div className={`w-3 h-3 rounded-full ${
                      entry.action === '服用' ? 'bg-green-500' : 
                      entry.action === '追加処方' ? 'bg-orange-500' : 'bg-blue-500'
                    }`} />
                    <div>
                      <div className="flex items-center gap-2">
                        <span className="font-medium text-gray-800">{entry.medicine_name}</span>
                        <span className={`text-xs px-2 py-1 rounded ${
                          entry.action === '服用' 
                            ? 'bg-green-100 text-green-800' 
                            : entry.action === '追加処方'
                            ? 'bg-orange-100 text-orange-800'
                            : 'bg-blue-100 text-blue-800'
                        }`}>
                          {entry.action}
                        </span>
                      </div>
                      {entry.notes && (
                        <p className="text-sm text-gray-600 mt-1">({entry.notes})</p>
                      )}
                    </div>
                  </div>
                  <div className="text-right">
                    <div className="text-sm font-medium text-gray-700">
                      {entry.action === '服用' ? '-' : '+'}{entry.quantity}個
                    </div>
                    <div className="text-xs text-gray-500 flex items-center gap-1">
                      <Clock className="w-3 h-3" />
                      {entry.date}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* フッター */}
        <div className="mt-8 text-center text-sm text-gray-500">
          <p>💊 薬の在庫管理アプリ - ローカル版</p>
          <p className="mt-1">定期処方薬の管理に対応</p>
        </div>
      </div>
    </div>
  );
};

export default MedicineAppMockup;